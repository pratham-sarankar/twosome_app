// Mocks generated by Mockito 5.4.5 from annotations
// in twosome_app/test/features/dots/domain/use_cases/get_dots_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:twosome_app/core/errors/failures.dart' as _i5;
import 'package:twosome_app/features/dots/domain/entities/dot.dart' as _i6;
import 'package:twosome_app/features/dots/domain/repositories/dot_repositories.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DotRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDotRepository extends _i1.Mock implements _i3.DotRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Dot>>> getDots() =>
      (super.noSuchMethod(
            Invocation.method(#getDots, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Dot>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Dot>>(
                    this,
                    Invocation.method(#getDots, []),
                  ),
                ),
            returnValueForMissingStub:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Dot>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Dot>>(
                    this,
                    Invocation.method(#getDots, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Dot>>>);
}
